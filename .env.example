# ==========================================
# AI Certificate Verifier - Environment Variables
# ==========================================
# 
# CRITICAL: This application requires an OpenAI API key to function
# Get your API key from: https://platform.openai.com/api-keys
# or use OpenRouter: https://openrouter.ai/
#
# For Local Development: Copy this file to .env and fill in your values
# For Production (Render): Set these in Render Dashboard Environment Variables
# ==========================================

# ==========================================
# AI Configuration (REQUIRED)
# ==========================================
# OpenAI API Key - Get from https://platform.openai.com/api-keys
# Or use OpenRouter API - Get from https://openrouter.ai/keys
OPENAI_API_KEY=your_openai_api_key_here

# Optional: Use OpenRouter instead of OpenAI (more models, cheaper)
# Leave empty if using standard OpenAI API
OPENAI_BASE_URL=

# ==========================================
# Database Configuration
# ==========================================
# For Local Development (Docker)
POSTGRES_PASSWORD=your_secure_password_here

# Database URL (auto-configured in Docker and Render)
# Local: postgresql://postgres:password@db:5432/university_verifier
# Render: Auto-generated (don't set manually)
DB_URL=postgresql://postgres:your_password@localhost:5432/university_verifier

# ==========================================
# Application Configuration
# ==========================================
# CORS Origins (comma-separated for multiple origins)
# Local: http://localhost:5173,http://localhost:3000
# Production: https://your-frontend.onrender.com
# Or use * for all origins (less secure, but works for testing)
CORS_ORIGIN=*

# File Upload Configuration
UPLOAD_DIR=./uploads
MAX_FILE_SIZE=10485760

# ==========================================
# Security Configuration
# ==========================================
# JWT Secret for authentication tokens
# Generate a secure random string:
# - On Linux/Mac: openssl rand -hex 32
# - On Windows: [Convert]::ToBase64String((1..32 | ForEach-Object { Get-Random -Max 256 }))
# - Online: https://randomkeygen.com/
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# Flask Secret Key (for University Portal)
# Same generation methods as JWT_SECRET
SECRET_KEY=your-flask-secret-key-change-this-in-production

# ==========================================
# Deployment Configuration
# ==========================================
# Server Port (5000 for backend, 3000 for portal)
PORT=5000

# Server Host (0.0.0.0 to accept all connections)
HOST=0.0.0.0

# Logging Level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# ==========================================
# Frontend Configuration (Vite)
# ==========================================
# Backend API URL
# Local: http://localhost:5000/api/v1
# Production: https://your-backend.onrender.com/api/v1
VITE_API_URL=http://localhost:5000/api/v1

# ==========================================
# Production Deployment Notes
# ==========================================
# 
# When deploying to Render:
# 
# 1. DATABASE_URL is auto-generated by Render PostgreSQL service
#    - Don't set it manually, Render will inject it automatically
# 
# 2. OPENAI_API_KEY must be set manually in Render dashboard:
#    - Go to your backend service
#    - Click "Environment" tab
#    - Add: OPENAI_API_KEY = your-actual-api-key
# 
# 3. CORS_ORIGIN should be set to your frontend URL:
#    - Example: https://university-verifier-frontend.onrender.com
#    - Or use * for testing (less secure)
# 
# 4. SECRET_KEY and JWT_SECRET are auto-generated by Render
#    - Or set manually with secure random values
# 
# 5. VITE_API_URL must point to your backend URL:
#    - Example: https://university-verifier-backend.onrender.com/api/v1
# 
# ==========================================
